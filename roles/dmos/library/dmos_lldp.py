#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for dmos_lldp
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': '<support_group>'
}

DOCUMENTATION = """
---
module: dmos_lldp
version_added: 4.9
short_description: 'Manages <xxxx> attributes of <network_os> <resource>.'
description: 'Manages <xxxx> attributes of <network_os> <resource>'
author: Ansible Network Engineer
notes:
  - 'Tested against <network_os> <version>'
options:
  config:
    description: The provided configuration
    type: list
    elements: dict
    suboptions:
      interface:
        description: Link Layer Discovery Protocol Interface Configuration
        type: list
        elements: dict
        suboptions:
          name:
            description: Link Layer Discovery Protocol Interface name
            type: str
            required: true
          admin_status:
            description: Administrative LLDP port status
            type: str
            choices:
              - disabled
              - rx-only
              - tx-and-rx
              - tx-only
          notification:
            description: Enable LLDP notifications for this interface
            type: bool
          tlv_port_description:
            description: Port Description TLV
            type: bool
          tlv_system_capabilities:
            description: System Capabilities TLV
            type: bool
          tlv_system_description:
            description: System Description TLV
            type: bool
          tlv_system_name:
            description: System Name TLV
            type: bool
      msg_fast_tx:
        description: <1-3600> Time interval at which LLDP frames are transmitted during fast transmission period
        type: int
      msg_tx_hold_multi:
        description: <2-10> TTL value expressed as a multiple of message-tx-interval
        type: int
      msg_tx_interval:
        description: <5-32768> Time interval at which LLDP frames are transmitted
        type: int
      notification_interval:
        description: <5-3600> Time interval between transmissions of LLDP notifications
        type: int
      reinit_delay:
        description: <1-10> Amount of delay until a re-initialization attempt
        type: int
      tx_credit_max:
        description: <1-100> Maximum number of consecutive LLDP frames that can be transmitted in a second
        type: int
      tx_fast_init:
        description: <1-8> Number of LLDP frames sent in fast transmission period
        type: int
  state:
    description:
    - The state the configuration should be left in
    type: str
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    default: merged
"""
EXAMPLES = """
# Using Present

<placeholder for the configuration example prior to module invocation>

- name: Configure LLDP
  dmos_lldp:
    config:
      - interface:
          - name: gigabit-ethernet-1/1/1
            admin_status: rx-only
            notification: true
            tlv_port_description: true
            tlv_system_capabilities: true
            tlv_system_description: true
            tlv_system_name: true
        msg_fast_tx: 1
        msg_tx_hold_multi: 4
        msg_tx_interval: 10
        notification_interval: 30
        reinit_delay: 2
        tx_credit_max: 5
        tx_fast_init: 1

<placeholder for the configuration example after module invocation>


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.dmos.argspec.lldp.lldp import LldpArgs
from ansible.module_utils.network.dmos.config.lldp.lldp import Lldp


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=LldpArgs.argument_spec,
                           supports_check_mode=True)

    result = Lldp(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
